// Generated by purs version 0.11.7
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Set = require("../Data.Set");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Pass = (function () {
    function Pass() {

    };
    Pass.value = new Pass();
    return Pass;
})();
var Play = (function () {
    function Play(value0) {
        this.value0 = value0;
    };
    Play.create = function (value0) {
        return new Play(value0);
    };
    return Play;
})();
var Black = (function () {
    function Black() {

    };
    Black.value = new Black();
    return Black;
})();
var White = (function () {
    function White() {

    };
    White.value = new White();
    return White;
})();
var State = function (x) {
    return x;
};
var neighPos = function (v) {
    return [ new Data_Tuple.Tuple(v.value0, v.value1 + 1 | 0), new Data_Tuple.Tuple(v.value0 + 1 | 0, v.value1), new Data_Tuple.Tuple(v.value0, v.value1 - 1 | 0), new Data_Tuple.Tuple(v.value0 - 1 | 0, v.value1) ];
};
var init = function (v) {
    var newBoard = Data_Functor.map(Data_Functor.functorArray)(function (v1) {
        return Data_Maybe.Nothing.value;
    })(Data_Array.range(0)((v.value0 * v.value1 | 0) - 1 | 0));
    return {
        board: newBoard,
        size: new Data_Tuple.Tuple(v.value0, v.value1),
        moveNum: 0,
        curCol: Black.value,
        koPos: Data_Maybe.Nothing.value,
        bPrison: 0,
        wPrison: 0
    };
};
var fromInts = function (size) {
    return function (as) {
        var field = function (i) {
            if (i === 1) {
                return new Data_Maybe.Just(Black.value);
            };
            if (i === 2) {
                return new Data_Maybe.Just(White.value);
            };
            return Data_Maybe.Nothing.value;
        };
        var board = Data_Functor.map(Data_Functor.functorArray)(field)(as);
        return {
            board: board,
            size: size,
            moveNum: 0,
            curCol: Black.value,
            koPos: Data_Maybe.Nothing.value,
            bPrison: 0,
            wPrison: 0
        };
    };
};
var flipColor = function (v) {
    if (v instanceof Black) {
        return White.value;
    };
    if (v instanceof White) {
        return Black.value;
    };
    throw new Error("Failed pattern match at GameLogic line 123, column 1 - line 123, column 28: " + [ v.constructor.name ]);
};
var eqColor = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Black && y instanceof Black) {
            return true;
        };
        if (x instanceof White && y instanceof White) {
            return true;
        };
        return false;
    };
});
var canonPos = function (v) {
    return function (v1) {
        var y_mod = v1.value1 % v.value1;
        var y_mod_abs = (function () {
            var $46 = y_mod >= 0;
            if ($46) {
                return y_mod;
            };
            return v.value0 + y_mod | 0;
        })();
        var x_mod = v1.value0 % v.value0;
        var x_mod_abs = (function () {
            var $47 = x_mod >= 0;
            if ($47) {
                return x_mod;
            };
            return v.value0 + x_mod | 0;
        })();
        return x_mod_abs + (v.value0 * y_mod_abs | 0) | 0;
    };
};
var getField = function (v) {
    return function (p) {
        var idx = canonPos(v.size)(p);
        return Data_Maybe.fromJust()(Data_Array.index(v.board)(idx));
    };
};
var neighFields = function (state) {
    return function (p) {
        return Data_Functor.map(Data_Functor.functorArray)(getField(state))(neighPos(p));
    };
};
var directLiberties = function (s) {
    return function (p) {
        return Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Maybe.eqMaybe(eqColor))(Data_Maybe.Nothing.value))(neighFields(s)(p)));
    };
};
var neighWithField = function (s) {
    return function (field) {
        return function (p) {
            return Data_Array.filter(function (n) {
                return Data_Eq.eq(Data_Maybe.eqMaybe(eqColor))(getField(s)(n))(field);
            })(neighPos(p));
        };
    };
};
var freeNeighPos = function (s) {
    return function (p) {
        return neighWithField(s)(Data_Maybe.Nothing.value)(p);
    };
};
var neighEnemies = function (s) {
    return function (p) {
        var v = getField(s)(p);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return neighWithField(s)(new Data_Maybe.Just(flipColor(v.value0)))(p);
        };
        throw new Error("Failed pattern match at GameLogic line 95, column 5 - line 97, column 66: " + [ v.constructor.name ]);
    };
};
var neighFriends = function (s) {
    return function (p) {
        var v = getField(s)(p);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return neighWithField(s)(new Data_Maybe.Just(v.value0))(p);
        };
        throw new Error("Failed pattern match at GameLogic line 89, column 5 - line 91, column 54: " + [ v.constructor.name ]);
    };
};
var group = function (s) {
    return function (p) {
        var step = function ($copy_mem) {
            return function ($copy_newMem) {
                var $tco_var_mem = $copy_mem;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(mem, newMem) {
                    var newMemArray = Data_Array.fromFoldable(Data_Set.foldableSet)(newMem);
                    var newNeighArray = Data_Array.concatMap(neighFriends(s))(newMemArray);
                    var newNeighSet = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(newNeighArray);
                    var newMem$prime = Data_Set.difference(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(newNeighSet)(mem);
                    var mem$prime = Data_Set.union(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(mem)(newMem$prime);
                    var $58 = Data_Set.isEmpty(newMem$prime);
                    if ($58) {
                        $tco_done = true;
                        return mem;
                    };
                    $tco_var_mem = mem$prime;
                    $copy_newMem = newMem$prime;
                    return;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_mem, $copy_newMem);
                };
                return $tco_result;
            };
        };
        var v = getField(s)(p);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Array.fromFoldable(Data_Set.foldableSet)(step(Data_Set.singleton(p))(Data_Set.singleton(p)));
        };
        throw new Error("Failed pattern match at GameLogic line 101, column 5 - line 103, column 78: " + [ v.constructor.name ]);
    };
};
var liberties = function (s) {
    return function (p) {
        var v = getField(s)(p);
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(Data_Array.length(Data_Array.nub(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(Data_Array.concatMap(freeNeighPos(s))(group(s)(p)))));
        };
        throw new Error("Failed pattern match at GameLogic line 135, column 5 - line 137, column 91: " + [ v.constructor.name ]);
    };
};
var captures = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_Maybe.Just) {
                var filterFun = function (neighPos1) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(1))(liberties(v)(neighPos1));
                };
                return Data_Array.filter(filterFun)(neighWithField(v)(new Data_Maybe.Just(flipColor(v2.value0)))(v1));
            };
            return [  ];
        };
    };
};
var testLegal = function (v) {
    return function (p) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(eqColor))(getField(v)(p))(Data_Maybe.Nothing.value) && (Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt)))(v.koPos)(new Data_Maybe.Just(p)) && (directLiberties(v)(p) > 0 || (Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(1)))(Data_Functor.map(Data_Functor.functorArray)(liberties(v))(neighWithField(v)(new Data_Maybe.Just(flipColor(v.curCol)))(p))) || Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(1)))(Data_Functor.map(Data_Functor.functorArray)(liberties(v))(neighWithField(v)(new Data_Maybe.Just(v.curCol))(p))))));
    };
};
var toString = function (v) {
    var field = function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
            return "O";
        };
        if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Black) {
            return "X";
        };
        if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof White) {
            return "Y";
        };
        throw new Error("Failed pattern match at GameLogic line 117, column 9 - line 118, column 9: " + [ v1.constructor.name ]);
    };
    var row = function (y) {
        return Data_Functor.map(Data_Functor.functorArray)(function (x) {
            return field(getField(v)(new Data_Tuple.Tuple(x, y)));
        })(Data_Array.range(0)(Data_Tuple.fst(v.size) - 1 | 0));
    };
    return Data_String.fromCharArray(Data_Array.concatMap(function (y) {
        return Data_Array.snoc(row(y))("\x0a");
    })(Data_Array.range(0)(Data_Tuple.snd(v.size) - 1 | 0)));
};
var setField = function (v) {
    return function (field) {
        return function (p) {
            var idx = canonPos(v.size)(p);
            var board$prime = Data_Maybe.fromJust()(Data_Array.updateAt(idx)(field)(v.board));
            var $76 = {};
            for (var $77 in v) {
                if ({}.hasOwnProperty.call(v, $77)) {
                    $76[$77] = v[$77];
                };
            };
            $76.board = board$prime;
            return $76;
        };
    };
};
var capture = function (state) {
    return function (caps) {
        var foldFun = function (v) {
            return function (pos) {
                var v1 = getField(v)(pos);
                if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Black) {
                    return setField((function () {
                        var $82 = {};
                        for (var $83 in v) {
                            if ({}.hasOwnProperty.call(v, $83)) {
                                $82[$83] = v[$83];
                            };
                        };
                        $82.wPrison = v.wPrison + 1 | 0;
                        return $82;
                    })())(Data_Maybe.Nothing.value)(pos);
                };
                if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof White) {
                    return setField((function () {
                        var $86 = {};
                        for (var $87 in v) {
                            if ({}.hasOwnProperty.call(v, $87)) {
                                $86[$87] = v[$87];
                            };
                        };
                        $86.bPrison = v.bPrison + 1 | 0;
                        return $86;
                    })())(Data_Maybe.Nothing.value)(pos);
                };
                return v;
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(foldFun)(state)(caps);
    };
};
var testKoPos = function (v) {
    return function (p1) {
        return function (p2) {
            var p2_neigh = Data_Array.filter(function (p) {
                return canonPos(v.size)(p) !== canonPos(v.size)(p1);
            })(neighPos(p2));
            var p2_cols = Data_Functor.map(Data_Functor.functorArray)(getField(v))(p2_neigh);
            var p1_neigh = Data_Array.filter(function (p) {
                return canonPos(v.size)(p) !== canonPos(v.size)(p2);
            })(neighPos(p1));
            var p1_cols = Data_Functor.map(Data_Functor.functorArray)(getField(v))(p1_neigh);
            var f2 = new Data_Maybe.Just(v.curCol);
            var f1 = new Data_Maybe.Just(flipColor(v.curCol));
            var $93 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_Maybe.eqMaybe(eqColor))(f2))(p1_cols) && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_Maybe.eqMaybe(eqColor))(f1))(p2_cols);
            if ($93) {
                return new Data_Maybe.Just(p1);
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var makeMove = function (v) {
    return function (v1) {
        if (v1 instanceof Pass) {
            var $96 = {};
            for (var $97 in v) {
                if ({}.hasOwnProperty.call(v, $97)) {
                    $96[$97] = v[$97];
                };
            };
            $96.moveNum = v.moveNum + 1 | 0;
            $96.curCol = flipColor(v.curCol);
            $96.koPos = Data_Maybe.Nothing.value;
            return $96;
        };
        if (v1 instanceof Play) {
            var toBeCap = captures(v)(v1.value0)(new Data_Maybe.Just(v.curCol));
            var newKoPos = (function () {
                var $99 = Data_Array.length(toBeCap) !== 1;
                if ($99) {
                    return Data_Maybe.Nothing.value;
                };
                var v2 = Data_Array.index(toBeCap)(0);
                if (v2 instanceof Data_Maybe.Nothing) {
                    return Data_Maybe.Nothing.value;
                };
                if (v2 instanceof Data_Maybe.Just) {
                    return testKoPos(v)(v2.value0)(v1.value0);
                };
                throw new Error("Failed pattern match at GameLogic line 186, column 18 - line 188, column 56: " + [ v2.constructor.name ]);
            })();
            var newState = (function () {
                var $102 = {};
                for (var $103 in v) {
                    if ({}.hasOwnProperty.call(v, $103)) {
                        $102[$103] = v[$103];
                    };
                };
                $102.moveNum = v.moveNum + 1 | 0;
                $102.curCol = flipColor(v.curCol);
                $102.koPos = newKoPos;
                return $102;
            })();
            var v2 = testLegal(v)(v1.value0);
            if (v2) {
                return setField(capture(newState)(toBeCap))(new Data_Maybe.Just(v.curCol))(v1.value0);
            };
            if (!v2) {
                return v;
            };
            throw new Error("Failed pattern match at GameLogic line 180, column 5 - line 182, column 23: " + [ v2.constructor.name ]);
        };
        throw new Error("Failed pattern match at GameLogic line 177, column 1 - line 177, column 35: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
module.exports = {
    Black: Black,
    White: White,
    Pass: Pass,
    Play: Play,
    State: State,
    init: init,
    fromInts: fromInts,
    canonPos: canonPos,
    getField: getField,
    setField: setField,
    neighPos: neighPos,
    neighFields: neighFields,
    neighWithField: neighWithField,
    neighFriends: neighFriends,
    neighEnemies: neighEnemies,
    group: group,
    toString: toString,
    flipColor: flipColor,
    freeNeighPos: freeNeighPos,
    directLiberties: directLiberties,
    liberties: liberties,
    testLegal: testLegal,
    capture: capture,
    captures: captures,
    testKoPos: testKoPos,
    makeMove: makeMove,
    eqColor: eqColor
};
